import asyncio
import websockets
import requests
import json
import random
import time

class ChzzkChat:
    def __init__(self, base_url, channel_id):
        self.base_url = base_url
        self.channel_id = channel_id
        self.ws = None
        self.ss_id = None
        self.acc_tkn = None
        self.ext_tkn = None
        self.svcid = None
        self.uid = None
        self.sid = None
        self.chat_id = None
        self.callbacks = {}
        self.polling_status = False
        self.ping_status = False

    async def get_user_info(self):
        response = requests.get(f"{self.base_url}/nng_main/v1/user/getUserStatus")
        if response.status_code == 200:
            return response.json()
        return None

    async def get_chat_id(self):
        response = requests.get(f"{self.base_url}/polling/v2/channels/{self.channel_id}/live-status")
        if response.status_code == 200:
            return response.json()
        return None

    async def get_access_token(self):
        response = requests.get(f"{self.base_url}/nng_main/v1/chats/access-token?channelId={self.chat_id}&chatType=STREAMING")
        if response.status_code == 200:
            return response.json()
        return None

    async def connect(self):
        if self.ws:
            return

        my_info = await self.get_user_info()
        if not my_info or my_info['code'] != 200:
            return

        self.uid = my_info['content']['userIdHash']

        if not self.polling_status:
            self.polling_status = True
            asyncio.create_task(self.polling())

        chat_info = await self.get_chat_id()
        if not chat_info:
            return

        self.chat_id = chat_info['content']['chatChannelId']

        access_info = await self.get_access_token()
        if not access_info or access_info['code'] != 200:
            return

        self.acc_tkn = access_info['content']['accessToken']
        self.ext_tkn = access_info['content']['extraToken']

        self.ss_id = random.randint(1, 10)
        self.ws = await websockets.connect(f"wss://kr-ss{self.ss_id}.chat.naver.com/chat")

        await self.ws.send(json.dumps({
            "ver": "2",
            "cmd": 100,
            "svcid": "game",
            "cid": self.chat_id,
            "bdy": {
                "uid": self.uid,
                "devType": 2001,
                "accTkn": self.acc_tkn,
                "auth": "SEND"
            },
            "tid": 1
        }))

        async for message in self.ws:
            data = json.loads(message)
            await self.handle_message(data)

    async def handle_message(self, data):
        if 'cid' in data:
            self.chat_id = data['cid']
        if 'svcid' in data:
            self.svcid = data['svcid']
        if 'bdy' in data and 'sid' in data['bdy']:
            self.sid = data['bdy']['sid']

        if data['cmd'] == 0:
            await self.ws.send(json.dumps({"ver": "2", "cmd": 10000}))
        elif data['cmd'] == 10100:
            if not self.ping_status:
                asyncio.create_task(self.ping())
        elif data['cmd'] == 93101:
            await self.process_chat_message(data['bdy'])
        elif data['cmd'] == 93102:
            await self.process_donation(data['bdy'])

    async def process_chat_message(self, data):
        messages = {}
        for message in data:
            profile = json.loads(message['profile']) if 'profile' in message else {}
            mod_val = profile.get('userRoleCode') in ["streamer", "streaming_channel_manager", "streaming_chat_manager"]
            messages[len(messages)] = {
                "author": {
                    "id": message['uid'],
                    "name": profile.get('nickname', None),
                    "imageURL": profile.get('profileImageUrl', None),
                    "hasMod": mod_val
                },
                "message": message['msg'],
                "time": message['msgTime']
            }
        for callback in self.callbacks.values():
            if callback['type'] == "message":
                callback['callback'](messages)

    async def process_donation(self, data):
        donations = {}
        for donation in data:
            profile = json.loads(donation['profile']) if 'profile' in donation else {}
            extras = json.loads(donation['extras']) if 'extras' in donation else {}
            mod_val = profile.get('userRoleCode') in ["streamer", "streaming_channel_manager", "streaming_chat_manager"]
            donations[len(donations)] = {
                "amount": extras.get('payAmount', 0),
                "author": {
                    "id": donation['uid'],
                    "name": profile.get('nickname', None),
                    "imageURL": profile.get('profileImageUrl', None),
                    "hasMod": mod_val
                },
                "message": donation['msg'],
                "time": donation['msgTime']
            }
        for callback in self.callbacks.values():
            if callback['type'] == "donation":
                callback['callback'](donations)

    async def ping(self):
        self.ping_status = True
        while True:
            await asyncio.sleep(20)
            await self.ws.send(json.dumps({"ver": "2", "cmd": 0}))

    async def polling(self):
        while True:
            await asyncio.sleep(30)
            chat_info = await self.get_chat_id()
            if chat_info and chat_info['content']['chatChannelId'] != self.chat_id:
                self.chat_id = chat_info['content']['chatChannelId']
                await self.disconnect()
                await self.connect()

    async def send(self, message):
        if not self.ws:
            return

        extras = {
            "chatType": "STREAMING",
            "osType": "PC",
            "streamingChannelId": self.channel_id,
            "emojis": "",
            "extraToken": self.ext_tkn
        }

        await self.ws.send(json.dumps({
            "ver": "2",
            "cmd": 3101,
            "svcid": self.svcid,
            "cid": self.chat_id,
            "sid": self.sid,
            "retry": False,
            "bdy": {
                "msg": message,
                "msgTypeCode": 1,
                "extras": json.dumps(extras),
                "msgTime": int(time.time() * 1000)
            },
            "tid": 3
        }))

    def on_message(self, callback):
        self.callbacks[len(self.callbacks)] = {
            "type": "message",
            "callback": callback
        }

    def on_donation(self, callback):
        self.callbacks[len(self.callbacks)] = {
            "type": "donation",
            "callback": callback
        }

    async def disconnect(self):
        if self.ws:
            await self.ws.close()
            self.ws = None

if __name__ == "__main__":
    async def main():
        base_url = input("Enter the base URL: ")
        channel_id = input("Enter the channel ID: ")

        chat = ChzzkChat(base_url, channel_id)
        await chat.connect()

        def print_messages(messages):
            for msg in messages.values():
                print(f"[{msg['time']}] {msg['author']['name']}: {msg['message']}")

        def print_donations(donations):
            for donation in donations.values():
                print(f"[{donation['time']}] {donation['author']['name']} donated {donation['amount']}")

        chat.on_message(print_messages)
        chat.on_donation(print_donations)

        await asyncio.Future()  # Run forever

    asyncio.run(main())
